import sys 
input = sys.stdin.readline 
from collections import deque
#dfs
def dfs(graph, v):
  visited = {} #사전생성
  stack = [v]

  while stack:
    n = stack.pop()
    if n not in visited:
      visited.setdefault(n)
      stack += reversed(graph[n])
  return visited

#bfs
def bfs(graph, v):
  visited = {}
  queue = deque([v])

  while queue:
    n = queue.popleft()
    if n not in visited:
      visited.setdefault(n)
      queue += graph[n]
  return visited

#입력
n, m, v = map(int, input().split())
graph = {i:[] for i in range(1,n+1)}
for i in range(1,m+1):
  x,y = map(int,input().split())
  graph[x].append(y)
  graph[y].append(x)

for key in graph:
  graph[key].sort()

#출력
print(' '.join(list(map(str,dfs(graph, v))))) 
print(' '.join(list(map(str,bfs(graph, v)))))
