#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int n,m;
const int maxi = 1001;
char school[maxi] = {'0',};//학교
int parent[maxi];//i의 부모노드
vector<pair<int,pair<int,int>>> graph;//그래프

//입력
void input(){
  cin>>n>>m;
  //부모노드 초기화
  for(int i=1;i<=n;i++){
    parent[i] = i;
  }
  //학교정보 입력
  for(int i=1;i<=n;i++){
    cin>>school[i];
  }
  //간선 입력
  for(int i=0;i<m;i++){
    int u,v,d;
    cin>>u>>v>>d;
    //학교 종류가 서로 다를 경우만 포함
    if(school[u]!=school[v]){
      graph.push_back({d,{u,v}});//비용, 위치
    }
  }
  sort(graph.begin(),graph.end());//비용 기준 정렬
}

//부모노드 찾기
int find(int h){
  if(parent[h]==h){//루트노드이면
    return h;
  }
  parent[h] = find(parent[h]);
  return parent[h];
}

//간선 합치기
void add(int a,int b){
  if(b>a){
    parent[b] = a;
  }else{
    parent[a] = b;
  }
}
//크루스칼
void kruskal(){
  int node = 0;//간선의 개수
  int total = 0;
  //거리가 작은 간선부터 탐색
  for(int i=0;i<graph.size();i++){
    int cost = graph[i].first;
    int x = graph[i].second.first;
    int y = graph[i].second.second;

    //순환하지 않을 경우에만 노드에 추가
    int a = find(x);
    int b = find(y);
    if(a!=b){
      add(a,b);//간선 합치기
      total+=cost;//비용 누적
      node++;//간선 증가
    }

    //간선 개수 만족
    if(node==n-1){
      cout<<total;
      return;
    }
  }
  cout<<-1;//모두 연결하는 경로가 없다.
}

int main(){
    input();//입력
    kruskal();//크루스칼 알고리즘
    return 0;
}
