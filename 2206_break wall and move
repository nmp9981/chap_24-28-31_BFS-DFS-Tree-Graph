#include <iostream>
#include <string>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;

int n,m;
int map[1000][1000];
int visit[1000][1000][2];
int dx[] = {-1,1,0,0};
int dy[] = {0,0,-1,1};
queue<pair<pair<int,int>,int>> q;

void bfs(){
  while(!q.empty()){
    //현재 위치
    int x = q.front().first.first;
    int y = q.front().first.second;
    int block = q.front().second;//남은 벽뚫기 횟수
    q.pop();

    //끝점 도달
    if(x==n-1 && y==m-1){
      cout<<visit[x][y][block]<<"\n";
      return;
    }

    //4방향 탐색
    for(int i=0;i<4;i++){
      int nx = x + dx[i];
      int ny = y + dy[i];
      //범위내에 있다면
      if(nx>=0 && nx<n && ny>=0 && ny<m){
        //벽이 있음, 아직 안뚫음(1->0)
        if(map[nx][ny] == 1 && block==1){
          visit[nx][ny][block-1] = visit[x][y][block] + 1;
          q.push({{nx,ny},block-1});//벽뚫기 사용
        }
        //미방문이고 벽이 없다면
        if(visit[nx][ny][block] == 0 && map[nx][ny] == 0){
          q.push({{nx,ny},block});
          visit[nx][ny][block] = visit[x][y][block] + 1;
        }
      }
    }
  }
  //도착을 못함
  cout<<-1<<"\n";
  return;
}
int main(){
  cin.tie(0);
  cout.tie(0);

  //입력
  cin>>n>>m;

  //지도 입력
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      scanf("%1d",&map[i][j]);
    }
  }

  q.push({{0,0},1});
  visit[0][0][1] = 1;//최단거리
  bfs();
  
  return 0;
}
